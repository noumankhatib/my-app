{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","background","myStyle","setMyState","btntext","setBtntext","className","style","id","type","onClick","border","Navbar","props","mode","to","title","toggleMode","htmlFor","TextForm","text","setText","heading","value","onChange","e","console","log","target","showAlert","backgroundColor","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","propsTypes","PropsTypes","string","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dbd37fdf.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nexport default function About() {\r\n    const [myStyle,setMyState] = useState({\r\n        color:'black',\r\n        background:'white'\r\n    })\r\n    const [btntext,setBtntext] = useState(\"Enable Dark Mode\")\r\n   const toggleStyle = () => {\r\n        if(myStyle.color === 'black'){\r\n            setMyState({\r\n                color:'white',\r\n                background:'black',\r\n                border:'2px solid white'\r\n            })\r\n            setBtntext(\"Enable Light Mode\")\r\n        }else\r\n        {\r\n            setMyState({\r\n                color:'black',\r\n                background:'white'\r\n            })\r\n            setBtntext(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle} >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropsTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nfunction Navbar(props) {\r\n    return (\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\n\r\nNavbar.propsTypes = {\r\n    title: PropsTypes.string\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log(\"you have click on handleUpClick\")\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase\",\"success\")\r\n    }\r\n    const handleloClick = ()=>{\r\n        console.log(\"you have click on handleloClick\")\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowerCase\",\"success\")\r\n    }\r\n    const handleOnChange = (e)=>{\r\n        console.log(\"you have click on handleOnChange\")\r\n        setText(e.target.value)\r\n        props.showAlert(\"Converted to lowerCase\",\"success\")\r\n\r\n    }\r\n    const handleClearClick=()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Text Clear\",\"success\")\r\n    }\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById('myBox')\r\n        text.select();\r\n        text.setSelectionRange(0,9999)\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied to Clipboard\",\"success\")\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[]+/)\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\",\"success\")\r\n    }\r\n\r\n    const [text,setText] = useState('Enter text here')\r\n    //     useEffect(()=>{\r\n    //         setText('Noumaan')\r\n    // },[])\r\n   \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\">Example textarea</label>\r\n                    <textarea className=\"form-control\"  value={text} id=\"myBox\" onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleloClick}>convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n          \r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}  >\r\n            <h1>Your text summery</h1>\r\n            <p>{text.split(\" \").length} and {text.length} character</p>\r\n            <p> {0.008 * text.split(\" \").length} Minutes Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to preveiw it\"}</p>\r\n            </div>\r\n            </>\r\n            )\r\n}\r\n","import React from 'react'\r\n\r\n\r\n\r\nexport default function Alert(props) {\r\nconst capitalize = (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase()+ lower.slice(1);\r\n}\r\n    return (\r\n            props.alert &&\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n               <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg}\r\n           </div>\r\n        \r\n    )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => { setAlert(null) }, 3000)\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark Mode has been enable\", \"success\")\n      document.title = 'TextUtils -Dark Mode'\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"ligth Mode has been enable\", \"success\")\n      document.title = 'TextUtils -light Mode'\n    }\n  }\n  return (\n    <>\n     <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n     \n        <div className=\"container my-3\">\n          <Alert alert={alert} />\n\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm heading=\"Enter the text in anayse below\" showAlert={showAlert} mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}